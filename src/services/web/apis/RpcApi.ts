/* tslint:disable */
/* eslint-disable */
/**
 * PaddleLabel API Specs
 * Web backend APIs for PaddleLabel
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  CreateCache200Response,
  CreateCacheRequest,
  GetFoldersRequest,
  Points2polygonRequest,
  Polygon2pointsRequest,
} from '../models/index';
import {
  CreateCache200ResponseFromJSON,
  CreateCache200ResponseToJSON,
  CreateCacheRequestFromJSON,
  CreateCacheRequestToJSON,
  GetFoldersRequestFromJSON,
  GetFoldersRequestToJSON,
  Points2polygonRequestFromJSON,
  Points2polygonRequestToJSON,
  Polygon2pointsRequestFromJSON,
  Polygon2pointsRequestToJSON,
} from '../models/index';

export interface CreateCacheOperationRequest {
  createCacheRequest?: CreateCacheRequest;
}

export interface GetCacheRequest {
  cacheId: string;
}

export interface GetFoldersOperationRequest {
  getFoldersRequest?: GetFoldersRequest;
}

export interface Points2polygonOperationRequest {
  points2polygonRequest?: Points2polygonRequest;
}

export interface Polygon2pointsOperationRequest {
  polygon2pointsRequest?: Polygon2pointsRequest;
}

export interface PrintDebugIdRequest {
  debugId: string;
}

/**
 *
 */
export class RpcApi extends runtime.BaseAPI {
  /**
   *
   */
  async createCacheRaw(
    requestParameters: CreateCacheOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateCache200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rpc/cache`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateCacheRequestToJSON(requestParameters['createCacheRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateCache200ResponseFromJSON(jsonValue),
    );
  }

  /**
   *
   */
  async createCache(
    createCacheRequest?: CreateCacheRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateCache200Response> {
    const response = await this.createCacheRaw(
      { createCacheRequest: createCacheRequest },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async getCacheRaw(
    requestParameters: GetCacheRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateCacheRequest>> {
    if (requestParameters['cacheId'] == null) {
      throw new runtime.RequiredError(
        'cacheId',
        'Required parameter "cacheId" was null or undefined when calling getCache().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/rpc/cache/{cache_id}`.replace(
          `{${'cache_id'}}`,
          encodeURIComponent(String(requestParameters['cacheId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateCacheRequestFromJSON(jsonValue),
    );
  }

  /**
   * Your GET endpoint
   */
  async getCache(
    cacheId: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateCacheRequest> {
    const response = await this.getCacheRaw({ cacheId: cacheId }, initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async getFoldersRaw(
    requestParameters: GetFoldersOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rpc/folders`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GetFoldersRequestToJSON(requestParameters['getFoldersRequest']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async getFolders(
    getFoldersRequest?: GetFoldersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getFoldersRaw({ getFoldersRequest: getFoldersRequest }, initOverrides);
  }

  /**
   *
   */
  async points2polygonRaw(
    requestParameters: Points2polygonOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rpc/seg/points2polygon`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: Points2polygonRequestToJSON(requestParameters['points2polygonRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   *
   */
  async points2polygon(
    points2polygonRequest?: Points2polygonRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<string>> {
    const response = await this.points2polygonRaw(
      { points2polygonRequest: points2polygonRequest },
      initOverrides,
    );
    return await response.value();
  }

  /**
   *
   */
  async polygon2pointsRaw(
    requestParameters: Polygon2pointsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/rpc/seg/polygon2points`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: Polygon2pointsRequestToJSON(requestParameters['polygon2pointsRequest']),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   *
   */
  async polygon2points(
    polygon2pointsRequest?: Polygon2pointsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.polygon2pointsRaw(
      { polygon2pointsRequest: polygon2pointsRequest },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Your GET endpoint
   */
  async printDebugIdRaw(
    requestParameters: PrintDebugIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['debugId'] == null) {
      throw new runtime.RequiredError(
        'debugId',
        'Required parameter "debugId" was null or undefined when calling printDebugId().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/debug/printid/{debug_id}`.replace(
          `{${'debug_id'}}`,
          encodeURIComponent(String(requestParameters['debugId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Your GET endpoint
   */
  async printDebugId(
    debugId: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.printDebugIdRaw({ debugId: debugId }, initOverrides);
  }
}
