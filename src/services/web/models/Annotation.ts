/* tslint:disable */
/* eslint-disable */
/**
 * PaddleLabel API Specs
 * Web backend APIs for PaddleLabel
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Label } from './Label';
import { LabelFromJSON, LabelFromJSONTyped, LabelToJSON } from './Label';

/**
 *
 * @export
 * @interface Annotation
 */
export interface Annotation {
  /**
   *
   * @type {number}
   * @memberof Annotation
   */
  annotationId?: number;
  /**
   *
   * @type {number}
   * @memberof Annotation
   */
  frontendId?: number;
  /**
   *
   * @type {number}
   * @memberof Annotation
   * @deprecated
   */
  taskId?: number;
  /**
   *
   * @type {number}
   * @memberof Annotation
   */
  labelId?: number;
  /**
   *
   * @type {Label}
   * @memberof Annotation
   */
  label?: Label;
  /**
   *
   * @type {number}
   * @memberof Annotation
   * @deprecated
   */
  projectId?: number;
  /**
   *
   * @type {number}
   * @memberof Annotation
   */
  dataId: number;
  /**
   *
   * @type {string}
   * @memberof Annotation
   */
  result?: string;
  /**
   *
   * @type {string}
   * @memberof Annotation
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Annotation
   */
  readonly created?: string;
  /**
   *
   * @type {string}
   * @memberof Annotation
   */
  readonly modified?: string;
  /**
   * 推理出这个结果的模型的名字
   * @type {string}
   * @memberof Annotation
   */
  predictedBy?: string;
}

/**
 * Check if a given object implements the Annotation interface.
 */
export function instanceOfAnnotation(value: object): value is Annotation {
  if (!('dataId' in value) || value['dataId'] === undefined) return false;
  return true;
}

export function AnnotationFromJSON(json: any): Annotation {
  return AnnotationFromJSONTyped(json, false);
}

export function AnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Annotation {
  if (json == null) {
    return json;
  }
  return {
    annotationId: json['annotation_id'] == null ? undefined : json['annotation_id'],
    frontendId: json['frontend_id'] == null ? undefined : json['frontend_id'],
    taskId: json['task_id'] == null ? undefined : json['task_id'],
    labelId: json['label_id'] == null ? undefined : json['label_id'],
    label: json['label'] == null ? undefined : LabelFromJSON(json['label']),
    projectId: json['project_id'] == null ? undefined : json['project_id'],
    dataId: json['data_id'],
    result: json['result'] == null ? undefined : json['result'],
    type: json['type'] == null ? undefined : json['type'],
    created: json['created'] == null ? undefined : json['created'],
    modified: json['modified'] == null ? undefined : json['modified'],
    predictedBy: json['predicted_by'] == null ? undefined : json['predicted_by'],
  };
}

export function AnnotationToJSON(value?: Omit<Annotation, 'created' | 'modified'> | null): any {
  if (value == null) {
    return value;
  }
  return {
    annotation_id: value['annotationId'],
    frontend_id: value['frontendId'],
    task_id: value['taskId'],
    label_id: value['labelId'],
    label: LabelToJSON(value['label']),
    project_id: value['projectId'],
    data_id: value['dataId'],
    result: value['result'],
    type: value['type'],
    predicted_by: value['predictedBy'],
  };
}
