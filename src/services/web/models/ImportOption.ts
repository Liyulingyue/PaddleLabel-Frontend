/* tslint:disable */
/* eslint-disable */
/**
 * PaddleLabel API Specs
 * Web backend APIs for PaddleLabel
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ImportOption
 */
export interface ImportOption {
  /**
   *
   * @type {string}
   * @memberof ImportOption
   */
  label: string;
  /**
   *
   * @type {boolean}
   * @memberof ImportOption
   */
  required: boolean;
  /**
   *
   * @type {string}
   * @memberof ImportOption
   */
  type: string;
  /**
   *
   * @type {Array<Array<string>>}
   * @memberof ImportOption
   */
  choices?: Array<Array<string>>;
  /**
   *
   * @type {string}
   * @memberof ImportOption
   */
  tips?: string;
  /**
   *
   * @type {Array<Array<string>>}
   * @memberof ImportOption
   */
  showAfter: Array<Array<string>>;
  /**
   *
   * @type {boolean}
   * @memberof ImportOption
   */
  allowEdit: boolean;
}

/**
 * Check if a given object implements the ImportOption interface.
 */
export function instanceOfImportOption(value: object): value is ImportOption {
  if (!('label' in value) || value['label'] === undefined) return false;
  if (!('required' in value) || value['required'] === undefined) return false;
  if (!('type' in value) || value['type'] === undefined) return false;
  if (!('showAfter' in value) || value['showAfter'] === undefined) return false;
  if (!('allowEdit' in value) || value['allowEdit'] === undefined) return false;
  return true;
}

export function ImportOptionFromJSON(json: any): ImportOption {
  return ImportOptionFromJSONTyped(json, false);
}

export function ImportOptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportOption {
  if (json == null) {
    return json;
  }
  return {
    label: json['label'],
    required: json['required'],
    type: json['type'],
    choices: json['choices'] == null ? undefined : json['choices'],
    tips: json['tips'] == null ? undefined : json['tips'],
    showAfter: json['show_after'],
    allowEdit: json['allow_edit'],
  };
}

export function ImportOptionToJSON(value?: ImportOption | null): any {
  if (value == null) {
    return value;
  }
  return {
    label: value['label'],
    required: value['required'],
    type: value['type'],
    choices: value['choices'],
    tips: value['tips'],
    show_after: value['showAfter'],
    allow_edit: value['allowEdit'],
  };
}
