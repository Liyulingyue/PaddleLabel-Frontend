/* tslint:disable */
/* eslint-disable */
/**
 * PaddleLabel API Specs
 * Web backend APIs for PaddleLabel
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: me@linhan.email
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Project } from './Project';
import { ProjectFromJSON, ProjectFromJSONTyped, ProjectToJSON } from './Project';
import type { Annotation } from './Annotation';
import { AnnotationFromJSON, AnnotationFromJSONTyped, AnnotationToJSON } from './Annotation';

/**
 * An annotation task
 * @export
 * @interface Task
 */
export interface Task {
  /**
   *
   * @type {number}
   * @memberof Task
   */
  readonly taskId?: number;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  projectId: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Task
   */
  dataPaths?: Array<string>;
  /**
   *
   * @type {Array<Annotation>}
   * @memberof Task
   */
  annotations?: Array<Annotation>;
  /**
   *
   * @type {Project}
   * @memberof Task
   */
  project?: Project;
  /**
   *
   * @type {number}
   * @memberof Task
   */
  set?: number;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  readonly modified?: string;
  /**
   *
   * @type {string}
   * @memberof Task
   */
  readonly created?: string;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): value is Task {
  if (!('projectId' in value) || value['projectId'] === undefined) return false;
  return true;
}

export function TaskFromJSON(json: any): Task {
  return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
  if (json == null) {
    return json;
  }
  return {
    taskId: json['task_id'] == null ? undefined : json['task_id'],
    projectId: json['project_id'],
    dataPaths: json['data_paths'] == null ? undefined : json['data_paths'],
    annotations:
      json['annotations'] == null
        ? undefined
        : (json['annotations'] as Array<any>).map(AnnotationFromJSON),
    project: json['project'] == null ? undefined : ProjectFromJSON(json['project']),
    set: json['set'] == null ? undefined : json['set'],
    modified: json['modified'] == null ? undefined : json['modified'],
    created: json['created'] == null ? undefined : json['created'],
  };
}

export function TaskToJSON(value?: Omit<Task, 'task_id' | 'modified' | 'created'> | null): any {
  if (value == null) {
    return value;
  }
  return {
    project_id: value['projectId'],
    data_paths: value['dataPaths'],
    annotations:
      value['annotations'] == null
        ? undefined
        : (value['annotations'] as Array<any>).map(AnnotationToJSON),
    project: ProjectToJSON(value['project']),
    set: value['set'],
  };
}
